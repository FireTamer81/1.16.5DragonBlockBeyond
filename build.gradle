buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.parchmentmc:librarian:1.+'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'

version = '1.0'
group = 'io.FireTamer.dragonblockbeyond' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'dragonblockbeyond'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

mixin {
    add sourceSets.main, "dragonblockbeyond.refmap.json"
    config "dragonblockbeyond.mixins.json"

    debug.verbose = true
    debug.export = true
}

sourceSets {
    main {
        java {
        }
        resources {
            include '**/**'
            // copy everything else, but blender and bbmodel files.
            exclude '**/*.blend'
            exclude '**/*.bbmodel'
            //Add the generated main module resources
            srcDirs += 'src/datagen/generated/main'
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }
    test {
        //The test module has no resources
        resources.srcDirs = []
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
    datagenmain { setupDataGenSourceSet(datagenmain, null, 'main') }
}

//This method sets up a source set in datagen/$name and adds the api, main mekanism module and an optional
// base module to the dependencies of the data generators source set that we are setting up
def setupDataGenSourceSet(SourceSet datagenSourceSet, SourceSet baseSourceSet, String name) {
    datagenSourceSet.java.srcDirs = ['src/datagen/' + name + '/java']
    datagenSourceSet.compileClasspath += project.sourceSets.main.output
    if (baseSourceSet == null) {
        //Base source set has resources that we put files that our annotation processor generates for consumption by our datagen
        datagenSourceSet.resources.srcDirs = ['src/datagen/' + name + '/resources']
    } else {
        //Data gen sourceSets outside of the main one have no resources
        datagenSourceSet.resources.srcDirs = []
        //Only case it is null is when we are doing datagenmain so other cases also add access to the stuff
        // in datagenmain so we can add helper classes
        datagenSourceSet.compileClasspath += project.sourceSets.datagenmain.output
        datagenSourceSet.compileClasspath += baseSourceSet.output
    }
}

configurations {
    //Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including forge
    extendConfigurations(implementation, apiImplementation, testImplementation, datagenmainImplementation)
    extendConfigurations(compileOnly, apiCompileOnly, testCompileOnly, datagenmainCompileOnly)
    extendConfigurations(runtimeOnly, apiRuntimeOnly, datagenmainRuntimeOnly)
}

static void extendConfigurations(Configuration base, Configuration... configurations) {
    for (def configuration : configurations) {
        configuration.extendsFrom(base)
    }
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2021.10.10-1.16.5'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run/client')

            arg "-mixin.config=dragonblockbeyond.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                dragonblockbeyond {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')

            arg "-mixin.config=dragonblockbeyond.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                dragonblockbeyond {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/client')

            arg "-mixin.config=dragonblockbeyond.mixins.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args '--all', '--output', file('src/datagen/generated/main'),
                    '--mod', 'dragonblockbeyond',
                    '--existing', file('src/main/resources/')

            mods {
                dragonblockbeyond.sources((SourceSet[]) [sourceSets.main, sourceSets.datagenmain])
            }
        }

        test {
            parent runs.client
            workingDirectory project.file('run/test')
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            arg "-mixin.config=dragonblockbeyond.mixins.json"

            mods {
                dragonblockbeyond {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }
    }
}

repositories {
    maven { url "https://dvs1.progwml6.com/files/maven/" }
    maven { url "https://modmaven.k-4u.nl" }

    maven { url "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }
    maven { url "https://dl.cloudsmith.io/public/matyrobbrt/matylib/maven/" }

    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
        allowInsecureProtocol = true
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven { url 'https://jitpack.io' }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
}


dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.22'

    implementation fg.deobf('software.bernie.geckolib:geckolib-forge-1.16.5:3.0.45')
    implementation fg.deobf("com.matyrobbrt:matylib-${mc_version}:${matylib_version}")

    implementation fg.deobf(project.dependencies.create("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}") {
        transitive = false
    })

    implementation fg.deobf(project.dependencies.create("top.theillusivec4.curios:curios-forge:${curios_version}") {
        transitive = false
    })

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //implementation fg.deobf("me.shedaniel:architectury-forge:${rootProject.architectury_version}")
    //implementation fg.deobf("curse.maven:architectury-forge-419699:3385660")
    //implementation fg.deobf("curse.maven:jei-419699:3564654")
    //implementation fg.deobf("dev.ftb.mods:ftb-library-forge:${rootProject.ftb_library_version}")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "FireTamer",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }

    }

}
